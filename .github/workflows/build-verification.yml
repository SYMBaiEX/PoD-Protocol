name: "🔍 Enhanced Build Verification"

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      full_verification:
        description: 'Run full verification suite'
        required: false
        default: false
        type: boolean
      performance_tests:
        description: 'Include performance tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

concurrency:
  group: verification-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLANA_VERSION: "2.2.17"
  ANCHOR_VERSION: "0.31.1"
  NODE_VERSION: "20"
  BUN_VERSION: "latest"
  RUST_BACKTRACE: 1
  FULL_VERIFICATION: ${{ inputs.full_verification || false }}
  PERFORMANCE_TESTS: ${{ inputs.performance_tests || false }}

jobs:
  detect-changes:
    name: "🔍 Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      rust-changes: ${{ steps.changes.outputs.rust }}
      frontend-changes: ${{ steps.changes.outputs.frontend }}
      sdk-changes: ${{ steps.changes.outputs.sdk }}
      cli-changes: ${{ steps.changes.outputs.cli }}
      docs-changes: ${{ steps.changes.outputs.docs }}
      workflow-changes: ${{ steps.changes.outputs.workflows }}
      test-matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "rust=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "sdk=true" >> $GITHUB_OUTPUT
            echo "cli=true" >> $GITHUB_OUTPUT
            echo "docs=true" >> $GITHUB_OUTPUT
            echo "workflows=true" >> $GITHUB_OUTPUT
          else
            RUST_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E "(programs/|Cargo\.|\.rs$)" | wc -l)
            FRONTEND_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "frontend/" | wc -l)
            SDK_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "sdk/" | wc -l)
            CLI_CHANGED=$(git diff --name-only HEAD^ HEAD | grep "cli/" | wc -l)
            DOCS_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E "(docs/|\.md$)" | wc -l)
            WORKFLOW_CHANGED=$(git diff --name-only HEAD^ HEAD | grep ".github/workflows/" | wc -l)
            
            echo "rust=$([ $RUST_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "frontend=$([ $FRONTEND_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "sdk=$([ $SDK_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "cli=$([ $CLI_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "docs=$([ $DOCS_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "workflows=$([ $WORKFLOW_CHANGED -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          fi

      - name: Generate test matrix
        id: matrix
        run: |
          MATRIX="["
          
          if [ "${{ steps.changes.outputs.rust }}" = "true" ]; then
            MATRIX="$MATRIX{\"component\":\"rust\",\"os\":\"ubuntu-latest\"},"
          fi
          
          if [ "${{ steps.changes.outputs.sdk }}" = "true" ]; then
            MATRIX="$MATRIX{\"component\":\"sdk\",\"os\":\"ubuntu-latest\"},"
          fi
          
          if [ "${{ steps.changes.outputs.cli }}" = "true" ]; then
            MATRIX="$MATRIX{\"component\":\"cli\",\"os\":\"ubuntu-latest\"},"
          fi
          
          if [ "${{ steps.changes.outputs.frontend }}" = "true" ]; then
            MATRIX="$MATRIX{\"component\":\"frontend\",\"os\":\"ubuntu-latest\"},"
          fi
          
          # Remove trailing comma and close array
          MATRIX=$(echo $MATRIX | sed 's/,$//')
          MATRIX="$MATRIX]"
          
          # If no changes detected, test everything
          if [ "$MATRIX" = "[]" ]; then
            MATRIX='[{"component":"rust","os":"ubuntu-latest"},{"component":"sdk","os":"ubuntu-latest"},{"component":"cli","os":"ubuntu-latest"},{"component":"frontend","os":"ubuntu-latest"}]'
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  security-audit:
    name: "🔒 Security Audit"
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run Rust security audit
        if: needs.detect-changes.outputs.rust-changes == 'true'
        run: |
          echo "🔍 Running Rust security audit..."
          cargo audit || echo "⚠️  Security audit completed with warnings"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies for audit
        run: |
          if [ -f "package.json" ]; then
            bun install --frozen-lockfile
          fi

      - name: Run npm security audit
        run: |
          echo "🔍 Running npm security audit..."
          
          # Check root dependencies
          if [ -f "package.json" ]; then
            npm audit --audit-level=high || echo "⚠️  npm audit completed with warnings"
          fi
          
          # Check SDK dependencies
          if [ -f "sdk/package.json" ]; then
            cd sdk && npm audit --audit-level=high || echo "⚠️  SDK audit completed with warnings"
            cd ..
          fi
          
          # Check CLI dependencies
          if [ -f "cli/package.json" ]; then
            cd cli && npm audit --audit-level=high || echo "⚠️  CLI audit completed with warnings"
            cd ..
          fi
          
          # Check frontend dependencies
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm audit --audit-level=high || echo "⚠️  Frontend audit completed with warnings"
            cd ..
          fi

      - name: Check for secrets in code
        run: |
          echo "🔍 Checking for potential secrets..."
          
          # Look for common secret patterns
          if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" . --exclude-dir=node_modules --exclude-dir=target --exclude-dir=.git || true; then
            echo "⚠️  Potential secrets found - please review"
          else
            echo "✅ No obvious secrets found"
          fi

  component-tests:
    name: "🧪 Test ${{ matrix.component }}"
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, security-audit]
    if: needs.detect-changes.outputs.test-matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          echo "Setting up environment for ${{ matrix.component }}"

      - name: Setup Rust toolchain
        if: matrix.component == 'rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup system dependencies
        if: matrix.component == 'rust'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Solana CLI
        if: matrix.component == 'rust'
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install Anchor CLI
        if: matrix.component == 'rust'
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}

      - name: Setup Bun
        if: matrix.component != 'rust'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
            sdk/node_modules
            cli/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-${{ matrix.component }}-${{ hashFiles('**/package.json', '**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.component }}-

      # Rust Program Tests
      - name: Install Rust dependencies
        if: matrix.component == 'rust'
        run: |
          echo "📦 Installing Rust dependencies..."
          cargo build --release

      - name: Run Rust tests
        if: matrix.component == 'rust'
        run: |
          echo "🧪 Running Rust tests..."
          cargo test --verbose

      - name: Run Rust clippy
        if: matrix.component == 'rust'
        run: |
          echo "📎 Running Rust clippy..."
          cargo clippy -- -D warnings

      - name: Check Rust formatting
        if: matrix.component == 'rust'
        run: |
          echo "🎨 Checking Rust formatting..."
          cargo fmt --check

      - name: Build Anchor program
        if: matrix.component == 'rust'
        run: |
          echo "⚓ Building Anchor program..."
          anchor build

      # SDK Tests
      - name: Install SDK dependencies
        if: matrix.component == 'sdk'
        working-directory: ./sdk
        run: |
          echo "📦 Installing SDK dependencies..."
          bun install --frozen-lockfile

      - name: Run SDK tests
        if: matrix.component == 'sdk'
        working-directory: ./sdk
        run: |
          echo "🧪 Running SDK tests..."
          bun run test

      - name: Run SDK linting
        if: matrix.component == 'sdk'
        working-directory: ./sdk
        run: |
          echo "🎨 Running SDK linting..."
          bun run lint || echo "⚠️  SDK linting completed with warnings"

      - name: Build SDK
        if: matrix.component == 'sdk'
        working-directory: ./sdk
        run: |
          echo "🏗️  Building SDK..."
          bun run build

      # CLI Tests
      - name: Install CLI dependencies
        if: matrix.component == 'cli'
        working-directory: ./cli
        run: |
          echo "📦 Installing CLI dependencies..."
          bun install --frozen-lockfile

      - name: Run CLI tests
        if: matrix.component == 'cli'
        working-directory: ./cli
        run: |
          echo "🧪 Running CLI tests..."
          bun run test

      - name: Run CLI linting
        if: matrix.component == 'cli'
        working-directory: ./cli
        run: |
          echo "🎨 Running CLI linting..."
          bun run lint || echo "⚠️  CLI linting completed with warnings"

      - name: Build CLI
        if: matrix.component == 'cli'
        working-directory: ./cli
        run: |
          echo "🏗️  Building CLI..."
          bun run build

      - name: Test CLI commands
        if: matrix.component == 'cli'
        working-directory: ./cli
        run: |
          echo "⚡ Testing CLI commands..."
          # Test basic CLI functionality
          node dist/index.js --help || echo "⚠️  CLI help test completed"

      # Frontend Tests
      - name: Install frontend dependencies
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          echo "📦 Installing frontend dependencies..."
          bun install --frozen-lockfile

      - name: Run frontend tests
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🧪 Running frontend tests..."
          bun run test --passWithNoTests

      - name: Run frontend linting
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🎨 Running frontend linting..."
          bun run lint || echo "⚠️  Frontend linting completed with warnings"

      - name: Build frontend
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🏗️  Building frontend..."
          bun run build

      - name: Test frontend build output
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🔍 Verifying frontend build output..."
          if [ -d ".next" ] || [ -d "out" ] || [ -d "dist" ]; then
            echo "✅ Frontend build output found"
            ls -la .next/ || ls -la out/ || ls -la dist/ || echo "Build output directory exists"
          else
            echo "❌ No frontend build output found"
            exit 1
          fi

  integration-tests:
    name: "🔄 Integration Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, component-tests]
    if: env.FULL_VERIFICATION == 'true' || needs.detect-changes.outputs.rust-changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup full test environment
        run: |
          echo "🏗️  Setting up integration test environment..."

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install Anchor CLI
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install all dependencies
        run: |
          echo "📦 Installing all dependencies..."
          bun install --frozen-lockfile
          cd sdk && bun install --frozen-lockfile && cd ..
          cd cli && bun install --frozen-lockfile && cd ..
          cd frontend && bun install --frozen-lockfile && cd ..

      - name: Run integration tests
        run: |
          echo "🔄 Running integration tests..."
          
          # Build everything first
          echo "🏗️  Building all components..."
          anchor build || echo "⚠️  Anchor build completed with warnings"
          
          cd sdk && bun run build && cd ..
          cd cli && bun run build && cd ..
          
          # Run integration tests if they exist
          if [ -f "tests/pod-com.test.ts" ]; then
            echo "🧪 Running Anchor integration tests..."
            anchor test || echo "⚠️  Integration tests completed with warnings"
          fi
          
          echo "✅ Integration tests completed"

  performance-tests:
    name: "⚡ Performance Tests"
    runs-on: ubuntu-latest
    needs: [detect-changes, component-tests]
    if: env.PERFORMANCE_TESTS == 'true' || env.FULL_VERIFICATION == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          cd sdk && bun install --frozen-lockfile && cd ..

      - name: Run performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          
          if [ -f "tests/performance-benchmark.test.ts" ]; then
            cd tests
            bun run performance-benchmark.test.ts || echo "⚠️  Performance tests completed with warnings"
            cd ..
          else
            echo "ℹ️  No performance tests found"
          fi

  build-verification-summary:
    name: "📊 Build Verification Summary"
    runs-on: ubuntu-latest
    needs: [detect-changes, security-audit, component-tests, integration-tests, performance-tests]
    if: always()
    steps:
      - name: Generate verification report
        run: |
          echo "## 🔍 Build Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.component-tests.result }}" = "success" ]; then
            echo "### ✅ Component Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Component Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-audit.result }}" = "success" ]; then
            echo "### ✅ Security Audit: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Security Audit: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" = "success" ] || [ "${{ needs.integration-tests.result }}" = "skipped" ]; then
            echo "### ✅ Integration Tests: ${{ needs.integration-tests.result == 'success' && 'PASSED' || 'SKIPPED' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-tests.result }}" = "success" ] || [ "${{ needs.performance-tests.result }}" = "skipped" ]; then
            echo "### ✅ Performance Tests: ${{ needs.performance-tests.result == 'success' && 'PASSED' || 'SKIPPED' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Performance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Test Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Changes**: ${{ needs.detect-changes.outputs.rust-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Changes**: ${{ needs.detect-changes.outputs.frontend-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SDK Changes**: ${{ needs.detect-changes.outputs.sdk-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CLI Changes**: ${{ needs.detect-changes.outputs.cli-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Verification**: ${{ env.FULL_VERIFICATION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ env.PERFORMANCE_TESTS }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date)" >> $GITHUB_STEP_SUMMARY